{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"github-bot-api API for creating GitHub bots and webhooks in Python. Note: If you want to make use of GithubApp.client or GithubApp.installation_client() , you need to install PyGithub . Quickstart (Webhook) Create a new Smee channel on https://smee.io Install smee-client (e.g. yarn global add smee-client ) Run smee -u <SMEE_CHANNEL_URL> -P /event-handler -p 5000 Create a Python script with the below contents and run it from github_bot_api import Event, Webhook from github_bot_api.flask import create_flask_app def on_any_event(event: Event) -> bool: print(event) return True webhook = Webhook(secret=None) webhook.listen('*', on_any_event) import os; os.environ['FLASK_ENV'] = 'development' flask_app = create_flask_app(__name__, webhook) flask_app.run() Quickstart (Application) Create a GitHub App, including a private key Set the APP_ID and PRIVATE_KEY_FILE environment variables Run the following Python script import os from github_bot_api import GithubApp with open(os.environ['PRIVATE_KEY_FILE']) as fp: private_key = fp.read() app = GithubApp( user_agent='my-bot/0.0.0', app_id=int(os.environ['APP_ID']), private_key=private_key) print(app.client.get_app().owner) Combined Example # ... app = GithubApp(...) webhook = Webhook() @webhook.listen('pull_request') def on_pull_request(event: Event) -> bool: client = app.installation_client(event.payload['installation']['id']) repo = client.get_repo(event['repository']['full_name']) pr = repo.get_pull(event['pull_request']['number']) pr.create_issue_comment('Hello from my own bot!') return True # ...","title":"Home"},{"location":"#github-bot-api","text":"API for creating GitHub bots and webhooks in Python. Note: If you want to make use of GithubApp.client or GithubApp.installation_client() , you need to install PyGithub .","title":"github-bot-api"},{"location":"#quickstart-webhook","text":"Create a new Smee channel on https://smee.io Install smee-client (e.g. yarn global add smee-client ) Run smee -u <SMEE_CHANNEL_URL> -P /event-handler -p 5000 Create a Python script with the below contents and run it from github_bot_api import Event, Webhook from github_bot_api.flask import create_flask_app def on_any_event(event: Event) -> bool: print(event) return True webhook = Webhook(secret=None) webhook.listen('*', on_any_event) import os; os.environ['FLASK_ENV'] = 'development' flask_app = create_flask_app(__name__, webhook) flask_app.run()","title":"Quickstart (Webhook)"},{"location":"#quickstart-application","text":"Create a GitHub App, including a private key Set the APP_ID and PRIVATE_KEY_FILE environment variables Run the following Python script import os from github_bot_api import GithubApp with open(os.environ['PRIVATE_KEY_FILE']) as fp: private_key = fp.read() app = GithubApp( user_agent='my-bot/0.0.0', app_id=int(os.environ['APP_ID']), private_key=private_key) print(app.client.get_app().owner)","title":"Quickstart (Application)"},{"location":"#combined-example","text":"# ... app = GithubApp(...) webhook = Webhook() @webhook.listen('pull_request') def on_pull_request(event: Event) -> bool: client = app.installation_client(event.payload['installation']['id']) repo = client.get_repo(event['repository']['full_name']) pr = repo.get_pull(event['pull_request']['number']) pr.create_issue_comment('Hello from my own bot!') return True # ...","title":"Combined Example"},{"location":"api-documentation/github_bot_api.app/","text":"github_bot_api.app [view_source] Registry for GitHub event handlers. GithubApp Objects @dataclass class GithubApp() [view_source] Represents a GitHub application and all the required details. Example import os from github_bot_api import GithubApp with open(os.environ['PRIVATE_KEY_FILE']) as fp: private_key = fp.read() app = GithubApp( user_agent='my-bot/0.0.0', app_id=int(os.environ['APP_ID']), private_key=private_key) print(app.client.get_app().owner) user_agent [view_source] User agent of the application. This will be respected in get_user_agent() . app_id [view_source] GitHub Application ID. private_key [view_source] RSA private key to sign the JWT with. v3_api_url [view_source] GitHub API base URL. Defaults to the public GitHub API. get_user_agent | get_user_agent(installation_id: t.Optional[int] = None) -> str [view_source] Create a user agent string for the PyGithub client, including the installation if specified. jwt | @property | jwt() -> TokenInfo [view_source] Returns the JWT for your GitHub application. The JWT is the token to use with GitHub application APIs. jwt_supplier | @property | jwt_supplier() -> JwtSupplier [view_source] Returns a new JwtSupplier that is used for generating JWT tokens for your GitHub application. client | @property | client() -> 'github.Github' [view_source] Returns a PyGithub client for your GitHub application. Note that the client's token will expire after 10 minutes and you will have to create a new client or update the client's token with the value returned by jwt . It is recommended that you create a new client for each atomic operation you perform. This requires you to install PyGithub . get_installation_token_supplier | get_installation_token_supplier(installation_id: int) -> InstallationTokenSupplier [view_source] Create an InstallationTokenSupplier for your GitHub application to act within the scope of the given installation_id . installation_token | installation_token(installation_id: int) -> TokenInfo [view_source] A short-hand to retrieve a new installation token for the given installation_id . installation_client | installation_client(installation_id: int) -> 'github.Github' [view_source] Returns a PyGithub client for your GitHub application to act in the scope of the given installation_id . Note that the client's token will expire after 10 minutes and you will have to create a new client or update the client's token with the value returned by jwt . It is recommended that you create a new client for each atomic operation you perform. This requires you to install PyGithub .","title":"github_bot_api.app"},{"location":"api-documentation/github_bot_api.app/#github_bot_apiapp","text":"[view_source] Registry for GitHub event handlers.","title":"github_bot_api.app"},{"location":"api-documentation/github_bot_api.app/#githubapp-objects","text":"@dataclass class GithubApp() [view_source] Represents a GitHub application and all the required details. Example import os from github_bot_api import GithubApp with open(os.environ['PRIVATE_KEY_FILE']) as fp: private_key = fp.read() app = GithubApp( user_agent='my-bot/0.0.0', app_id=int(os.environ['APP_ID']), private_key=private_key) print(app.client.get_app().owner)","title":"GithubApp Objects"},{"location":"api-documentation/github_bot_api.app/#user_agent","text":"[view_source] User agent of the application. This will be respected in get_user_agent() .","title":"user_agent"},{"location":"api-documentation/github_bot_api.app/#app_id","text":"[view_source] GitHub Application ID.","title":"app_id"},{"location":"api-documentation/github_bot_api.app/#private_key","text":"[view_source] RSA private key to sign the JWT with.","title":"private_key"},{"location":"api-documentation/github_bot_api.app/#v3_api_url","text":"[view_source] GitHub API base URL. Defaults to the public GitHub API.","title":"v3_api_url"},{"location":"api-documentation/github_bot_api.app/#get_user_agent","text":"| get_user_agent(installation_id: t.Optional[int] = None) -> str [view_source] Create a user agent string for the PyGithub client, including the installation if specified.","title":"get_user_agent"},{"location":"api-documentation/github_bot_api.app/#jwt","text":"| @property | jwt() -> TokenInfo [view_source] Returns the JWT for your GitHub application. The JWT is the token to use with GitHub application APIs.","title":"jwt"},{"location":"api-documentation/github_bot_api.app/#jwt_supplier","text":"| @property | jwt_supplier() -> JwtSupplier [view_source] Returns a new JwtSupplier that is used for generating JWT tokens for your GitHub application.","title":"jwt_supplier"},{"location":"api-documentation/github_bot_api.app/#client","text":"| @property | client() -> 'github.Github' [view_source] Returns a PyGithub client for your GitHub application. Note that the client's token will expire after 10 minutes and you will have to create a new client or update the client's token with the value returned by jwt . It is recommended that you create a new client for each atomic operation you perform. This requires you to install PyGithub .","title":"client"},{"location":"api-documentation/github_bot_api.app/#get_installation_token_supplier","text":"| get_installation_token_supplier(installation_id: int) -> InstallationTokenSupplier [view_source] Create an InstallationTokenSupplier for your GitHub application to act within the scope of the given installation_id .","title":"get_installation_token_supplier"},{"location":"api-documentation/github_bot_api.app/#installation_token","text":"| installation_token(installation_id: int) -> TokenInfo [view_source] A short-hand to retrieve a new installation token for the given installation_id .","title":"installation_token"},{"location":"api-documentation/github_bot_api.app/#installation_client","text":"| installation_client(installation_id: int) -> 'github.Github' [view_source] Returns a PyGithub client for your GitHub application to act in the scope of the given installation_id . Note that the client's token will expire after 10 minutes and you will have to create a new client or update the client's token with the value returned by jwt . It is recommended that you create a new client for each atomic operation you perform. This requires you to install PyGithub .","title":"installation_client"},{"location":"api-documentation/github_bot_api.event/","text":"github_bot_api.event [view_source] Abstraction of a GitHub Webhook event. Reference: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads Event Objects @dataclass class Event() [view_source] Represents a GitHub webhook event. name [view_source] The name of the event. Could be pull_request , for example. delivery_id [view_source] The delivery ID of the event. signature [view_source] The signature of the event. Will only be set if a Webhook-secret is configured on the client side (e.g. in Webhook.secret / if the webhook_secret parameter is passed to accept_event() ). user_agent [view_source] The user agent invoking the webhook. payload [view_source] The event payload. accept_event accept_event(headers: t.Mapping[str, str], raw_body: bytes, webhook_secret: t.Optional[str] = None) -> Event [view_source] Converts thee HTTP headers and the raw_body to an Event object. Arguments headers : The HTTP headers. Must have X-Github-Event , X-Github-Delivery , User-Agent , Content-Type . May have X-Hub-Signature or X-Hub-Signature-256 . raw_body : The raw request body for the event. This is converted into a JSON payload. webhook_secret : If specified, the X-Hub-Signature or X-Hub-Signature-256 headers are used to verify the signature of the payload. If not specified, the client does not validate the signature. InvalidRequest Objects class InvalidRequest(Exception) [view_source] Raised when an invalid request is passed to accept_event() .","title":"github_bot_api.event"},{"location":"api-documentation/github_bot_api.event/#github_bot_apievent","text":"[view_source] Abstraction of a GitHub Webhook event. Reference: https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/webhook-events-and-payloads","title":"github_bot_api.event"},{"location":"api-documentation/github_bot_api.event/#event-objects","text":"@dataclass class Event() [view_source] Represents a GitHub webhook event.","title":"Event Objects"},{"location":"api-documentation/github_bot_api.event/#name","text":"[view_source] The name of the event. Could be pull_request , for example.","title":"name"},{"location":"api-documentation/github_bot_api.event/#delivery_id","text":"[view_source] The delivery ID of the event.","title":"delivery_id"},{"location":"api-documentation/github_bot_api.event/#signature","text":"[view_source] The signature of the event. Will only be set if a Webhook-secret is configured on the client side (e.g. in Webhook.secret / if the webhook_secret parameter is passed to accept_event() ).","title":"signature"},{"location":"api-documentation/github_bot_api.event/#user_agent","text":"[view_source] The user agent invoking the webhook.","title":"user_agent"},{"location":"api-documentation/github_bot_api.event/#payload","text":"[view_source] The event payload.","title":"payload"},{"location":"api-documentation/github_bot_api.event/#accept_event","text":"accept_event(headers: t.Mapping[str, str], raw_body: bytes, webhook_secret: t.Optional[str] = None) -> Event [view_source] Converts thee HTTP headers and the raw_body to an Event object. Arguments headers : The HTTP headers. Must have X-Github-Event , X-Github-Delivery , User-Agent , Content-Type . May have X-Hub-Signature or X-Hub-Signature-256 . raw_body : The raw request body for the event. This is converted into a JSON payload. webhook_secret : If specified, the X-Hub-Signature or X-Hub-Signature-256 headers are used to verify the signature of the payload. If not specified, the client does not validate the signature.","title":"accept_event"},{"location":"api-documentation/github_bot_api.event/#invalidrequest-objects","text":"class InvalidRequest(Exception) [view_source] Raised when an invalid request is passed to accept_event() .","title":"InvalidRequest Objects"},{"location":"api-documentation/github_bot_api.flask/","text":"github_bot_api.flask [view_source] Flask binding for handling GitHub webhook events. Note that you need to install the flask module separately. Example from github_bot_api import Event, Webhook from github_bot_api.flask import create_flask_app def on_any_event(event: Event) -> bool: print(event) return True webhook = Webhook(secret=None) webhook.listen('*', on_any_event) import os; os.environ['FLASK_ENV'] = 'development' flask_app = create_flask_app(__name__, webhook) flask_app.run() create_event_handler create_event_handler(webhook: Webhook) -> t.Callable[[], t.Tuple[t.Text, int, t.Dict[str, str]]] [view_source] Creates an event handler flask view that interprets the received HTTP request as a GitHub application event and dispatches it via webhook.dispatch() . create_flask_app create_flask_app(name: str, webhook: Webhook, path: str = '/event-handler') -> flask.Flask [view_source] Creates a new flask.Flask application with a POST event handler under the given path (defaulting to /event-handler ). This is a useful shorthand to attach your Webhook to an HTTP server.","title":"github_bot_api.flask"},{"location":"api-documentation/github_bot_api.flask/#github_bot_apiflask","text":"[view_source] Flask binding for handling GitHub webhook events. Note that you need to install the flask module separately. Example from github_bot_api import Event, Webhook from github_bot_api.flask import create_flask_app def on_any_event(event: Event) -> bool: print(event) return True webhook = Webhook(secret=None) webhook.listen('*', on_any_event) import os; os.environ['FLASK_ENV'] = 'development' flask_app = create_flask_app(__name__, webhook) flask_app.run()","title":"github_bot_api.flask"},{"location":"api-documentation/github_bot_api.flask/#create_event_handler","text":"create_event_handler(webhook: Webhook) -> t.Callable[[], t.Tuple[t.Text, int, t.Dict[str, str]]] [view_source] Creates an event handler flask view that interprets the received HTTP request as a GitHub application event and dispatches it via webhook.dispatch() .","title":"create_event_handler"},{"location":"api-documentation/github_bot_api.flask/#create_flask_app","text":"create_flask_app(name: str, webhook: Webhook, path: str = '/event-handler') -> flask.Flask [view_source] Creates a new flask.Flask application with a POST event handler under the given path (defaulting to /event-handler ). This is a useful shorthand to attach your Webhook to an HTTP server.","title":"create_flask_app"},{"location":"api-documentation/github_bot_api.signature/","text":"github_bot_api.signature [view_source] Helper to check the signature of a GitHub event request. compute_signature compute_signature(payload: bytes, secret: bytes, algo: str = 'sha256') -> str [view_source] Computes the HMAC signature of payload given the specified secret and the given hashing algo . Parmeters payload: The payload for which the signature should be computed. secret: The secret string that is used in conjunction to generate the signature. algo: The hash algorithm to use, must be sha1 or sha256 . check_signature check_signature(sig: str, payload: bytes, secret: bytes, algo: str = 'sha256') -> None [view_source] Compares the porivided signature sig with the computed signature of the payload and raises a SignatureMismatchException if they do not match. This function uses constant-time string comparison to prevent timing analysis. SignatureMismatchException Objects class SignatureMismatchException(Exception) [view_source] Raised if a signature can not be verified with check_signatuer() .","title":"github_bot_api.signature"},{"location":"api-documentation/github_bot_api.signature/#github_bot_apisignature","text":"[view_source] Helper to check the signature of a GitHub event request.","title":"github_bot_api.signature"},{"location":"api-documentation/github_bot_api.signature/#compute_signature","text":"compute_signature(payload: bytes, secret: bytes, algo: str = 'sha256') -> str [view_source] Computes the HMAC signature of payload given the specified secret and the given hashing algo . Parmeters payload: The payload for which the signature should be computed. secret: The secret string that is used in conjunction to generate the signature. algo: The hash algorithm to use, must be sha1 or sha256 .","title":"compute_signature"},{"location":"api-documentation/github_bot_api.signature/#check_signature","text":"check_signature(sig: str, payload: bytes, secret: bytes, algo: str = 'sha256') -> None [view_source] Compares the porivided signature sig with the computed signature of the payload and raises a SignatureMismatchException if they do not match. This function uses constant-time string comparison to prevent timing analysis.","title":"check_signature"},{"location":"api-documentation/github_bot_api.signature/#signaturemismatchexception-objects","text":"class SignatureMismatchException(Exception) [view_source] Raised if a signature can not be verified with check_signatuer() .","title":"SignatureMismatchException Objects"},{"location":"api-documentation/github_bot_api.token/","text":"github_bot_api.token [view_source] Generate a JWT from a GitHub application private key. Reference: https://docs.github.com/en/free-pro-team@latest/developers/apps/setting-up-your-development-environment-to-create-a-github-app TokenInfo Objects @dataclass class TokenInfo() [view_source] Represents a token including it's expiration time, type and token string value. exp [view_source] The timestamp after which the token expires. This is in local client time. type [view_source] The type of the token. This is usually Bearer when using create_jwt() . value [view_source] The token value, without the type prefix. auth_header | @property | auth_header() -> str [view_source] Return the full value to pass into an HTTP Authorization header for this token. create_jwt create_jwt(app_id: int, expires_in: int, private_key: str) -> TokenInfo [view_source] Generate a JWT for a GitHub App. Arguments app_id : The GitHub application ID. expires_in : The time until the token expires in seconds. GitHub does not allow an expiration time higher than 10 minutes (the token may be accepted but isn't valid for as long as you might expected). private_key : The RSA private key that was issued for the GitHub bot. Returns The JWT as a TokenInfo object. RefreshableTokenSupplier Objects class RefreshableTokenSupplier(Supplier[TokenInfo], metaclass=abc.ABCMeta) [view_source] Base class for token suppliers. JwtSupplier Objects @dataclass class JwtSupplier(RefreshableTokenSupplier) [view_source] Supplies a JWT Bearer token, refreshing it shortly before it expires. app_id [view_source] The ID of the GitHub application. private_key [view_source] The RSA private key to sign the JWT with. expires_in [view_source] The expiration time for the token in seconds. Defaults to 10 minutes (the maximum allowed). threshold [view_source] If the token is close to expire within this threshold (in seconds), it is renewed. InstallationTokenSupplier Objects @dataclass class InstallationTokenSupplier(RefreshableTokenSupplier) [view_source] Supplies a token for the given installation ID. app_jwt [view_source] The JWT token supplier. installation_id [view_source] The installation id. requestor [view_source] The function performing a POST request, accepting as arguments the Authorization header and the installation id, returning the JSON payload. threshold [view_source] If the token is close to expire within this threshold (in seconds), it is renewed.","title":"github_bot_api.token"},{"location":"api-documentation/github_bot_api.token/#github_bot_apitoken","text":"[view_source] Generate a JWT from a GitHub application private key. Reference: https://docs.github.com/en/free-pro-team@latest/developers/apps/setting-up-your-development-environment-to-create-a-github-app","title":"github_bot_api.token"},{"location":"api-documentation/github_bot_api.token/#tokeninfo-objects","text":"@dataclass class TokenInfo() [view_source] Represents a token including it's expiration time, type and token string value.","title":"TokenInfo Objects"},{"location":"api-documentation/github_bot_api.token/#exp","text":"[view_source] The timestamp after which the token expires. This is in local client time.","title":"exp"},{"location":"api-documentation/github_bot_api.token/#type","text":"[view_source] The type of the token. This is usually Bearer when using create_jwt() .","title":"type"},{"location":"api-documentation/github_bot_api.token/#value","text":"[view_source] The token value, without the type prefix.","title":"value"},{"location":"api-documentation/github_bot_api.token/#auth_header","text":"| @property | auth_header() -> str [view_source] Return the full value to pass into an HTTP Authorization header for this token.","title":"auth_header"},{"location":"api-documentation/github_bot_api.token/#create_jwt","text":"create_jwt(app_id: int, expires_in: int, private_key: str) -> TokenInfo [view_source] Generate a JWT for a GitHub App. Arguments app_id : The GitHub application ID. expires_in : The time until the token expires in seconds. GitHub does not allow an expiration time higher than 10 minutes (the token may be accepted but isn't valid for as long as you might expected). private_key : The RSA private key that was issued for the GitHub bot. Returns The JWT as a TokenInfo object.","title":"create_jwt"},{"location":"api-documentation/github_bot_api.token/#refreshabletokensupplier-objects","text":"class RefreshableTokenSupplier(Supplier[TokenInfo], metaclass=abc.ABCMeta) [view_source] Base class for token suppliers.","title":"RefreshableTokenSupplier Objects"},{"location":"api-documentation/github_bot_api.token/#jwtsupplier-objects","text":"@dataclass class JwtSupplier(RefreshableTokenSupplier) [view_source] Supplies a JWT Bearer token, refreshing it shortly before it expires.","title":"JwtSupplier Objects"},{"location":"api-documentation/github_bot_api.token/#app_id","text":"[view_source] The ID of the GitHub application.","title":"app_id"},{"location":"api-documentation/github_bot_api.token/#private_key","text":"[view_source] The RSA private key to sign the JWT with.","title":"private_key"},{"location":"api-documentation/github_bot_api.token/#expires_in","text":"[view_source] The expiration time for the token in seconds. Defaults to 10 minutes (the maximum allowed).","title":"expires_in"},{"location":"api-documentation/github_bot_api.token/#threshold","text":"[view_source] If the token is close to expire within this threshold (in seconds), it is renewed.","title":"threshold"},{"location":"api-documentation/github_bot_api.token/#installationtokensupplier-objects","text":"@dataclass class InstallationTokenSupplier(RefreshableTokenSupplier) [view_source] Supplies a token for the given installation ID.","title":"InstallationTokenSupplier Objects"},{"location":"api-documentation/github_bot_api.token/#app_jwt","text":"[view_source] The JWT token supplier.","title":"app_jwt"},{"location":"api-documentation/github_bot_api.token/#installation_id","text":"[view_source] The installation id.","title":"installation_id"},{"location":"api-documentation/github_bot_api.token/#requestor","text":"[view_source] The function performing a POST request, accepting as arguments the Authorization header and the installation id, returning the JSON payload.","title":"requestor"},{"location":"api-documentation/github_bot_api.token/#threshold_1","text":"[view_source] If the token is close to expire within this threshold (in seconds), it is renewed.","title":"threshold"},{"location":"api-documentation/github_bot_api.utils.mime/","text":"github_bot_api.utils.mime [view_source] get_mime_components get_mime_components(mime: str) -> t.Tuple[str, t.List[t.Tuple[str, str]]] [view_source] Parses a mime type into it's components, returning the name of the mimetype and a list of it's key=value parameters.","title":"github_bot_api.utils.mime"},{"location":"api-documentation/github_bot_api.utils.mime/#github_bot_apiutilsmime","text":"[view_source]","title":"github_bot_api.utils.mime"},{"location":"api-documentation/github_bot_api.utils.mime/#get_mime_components","text":"get_mime_components(mime: str) -> t.Tuple[str, t.List[t.Tuple[str, str]]] [view_source] Parses a mime type into it's components, returning the name of the mimetype and a list of it's key=value parameters.","title":"get_mime_components"},{"location":"api-documentation/github_bot_api.utils.types/","text":"github_bot_api.utils.types [view_source] Supplier Objects class Supplier(t.Protocol[T_co]) [view_source] Protocol for value suppliers. __call__ | __call__() -> T_co [view_source] Return the value provided by the supplier.","title":"github_bot_api.utils.types"},{"location":"api-documentation/github_bot_api.utils.types/#github_bot_apiutilstypes","text":"[view_source]","title":"github_bot_api.utils.types"},{"location":"api-documentation/github_bot_api.utils.types/#supplier-objects","text":"class Supplier(t.Protocol[T_co]) [view_source] Protocol for value suppliers.","title":"Supplier Objects"},{"location":"api-documentation/github_bot_api.utils.types/#__call__","text":"| __call__() -> T_co [view_source] Return the value provided by the supplier.","title":"__call__"},{"location":"api-documentation/github_bot_api.webhook/","text":"github_bot_api.webhook [view_source] Webhook Objects @dataclass class Webhook() [view_source] Represents a GitHub webhook that listens on an HTTP endpoint for events. Event handlers can be registered using the #@on() decorator or register() method. secret [view_source] The webhook secret, if also configured on GitHub. When specified, the payload signature is checked before an event is accepted by the underlying HTTP framework. listen | @t.overload | listen(event: str) -> t.Callable[[T], T] [view_source] Decorator to register an event handler function for the specified event . The event name can be an fnmatch pattern. listen | @t.overload | listen(event: str, func: t.Callable[[Event], bool]) -> None [view_source] Directly register an event handler function. dispatch | dispatch(event: Event) -> bool [view_source] Dispatch an event on the first handler that matches it. Returns True only if the event was handled by a handler.","title":"github_bot_api.webhook"},{"location":"api-documentation/github_bot_api.webhook/#github_bot_apiwebhook","text":"[view_source]","title":"github_bot_api.webhook"},{"location":"api-documentation/github_bot_api.webhook/#webhook-objects","text":"@dataclass class Webhook() [view_source] Represents a GitHub webhook that listens on an HTTP endpoint for events. Event handlers can be registered using the #@on() decorator or register() method.","title":"Webhook Objects"},{"location":"api-documentation/github_bot_api.webhook/#secret","text":"[view_source] The webhook secret, if also configured on GitHub. When specified, the payload signature is checked before an event is accepted by the underlying HTTP framework.","title":"secret"},{"location":"api-documentation/github_bot_api.webhook/#listen","text":"| @t.overload | listen(event: str) -> t.Callable[[T], T] [view_source] Decorator to register an event handler function for the specified event . The event name can be an fnmatch pattern.","title":"listen"},{"location":"api-documentation/github_bot_api.webhook/#listen_1","text":"| @t.overload | listen(event: str, func: t.Callable[[Event], bool]) -> None [view_source] Directly register an event handler function.","title":"listen"},{"location":"api-documentation/github_bot_api.webhook/#dispatch","text":"| dispatch(event: Event) -> bool [view_source] Dispatch an event on the first handler that matches it. Returns True only if the event was handled by a handler.","title":"dispatch"}]}